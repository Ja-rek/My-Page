{
    "version": "https://jsonfeed.org/version/1",
    "title": "Jarosław Szczerbaty",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "Blog, projects",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author": "{"name"=>nil, "email"=>nil, "url"=>nil, "avatar"=>nil}",
    
"items": [
    
        {
            "id": "http://localhost:4000/2020/04/17/i-need-interfaces-for-testable",
            "title": "Do we need interfaces for unit testing?",
            "summary": "No, just no, and once again no. It just doesn't work like that and thinking this way can destroy your project.",
            "content_text": "No, just no, and once again no. It just doesn’t work like that and thinking this way can destroy your project. So let’s imagine that you have a service that has some business logic and roles but in order to work, it must communicate with remote services and it also needs to use multiple databases. So, what will happen in the tests? The tests will require a long configuration of mocks and stubs. But why bother if there is a better way to do it. Firstly, what is most important for a good testing experience is the “single responsibility principle”, next is concentrating on writing the methods which have no side effects. Of course, also of importance is understanding basic patterns, which doesn’t mean “I know how to implement it”, it really means “I know which problem solves this pattern and why I use it”.What about SOLIDNow, I guess, somebody will say, “We need to inject each service through an interface because it must have a valid SOLID. “No, it’s not true. The dependency inversion is about the management of the dependency direction.” Robert C. Martin wrote in his book about the “naive implementation of DIP”, meaning that the heuristic approach of “each object needs an interface and DIP” isn’t a good idea because we can always find any objects that are non-volatile and concrete. He also wrote about SDP;  the Stable Dependencies Principle, wherein he demonstrated how to use DIP to manage the dependency direction, and which direction is correct.DIP and ArchitectureWe can find in other books patterns which are using dependency inversion in this way, for example, Decoupled Contract in SOA, 4 layers from Domain Driven Design, where we use a Repository interface in the domain layer to invert dependency of the infrastructure layer, Abstract Core, Hexagonal Architecture and so on. What I mean?So why do I say all this? Because, using DIP for each “service”, “factories”, “parsers”, “validators”, and so on is completely misunderstanding what you are doing, and it disturbs the building of a good architecture. Modern languages like C# also support other paradigms like functional programming. So, we can just use Func&lt;T,TResult&gt; or Action&lt;T&gt; delegates to inject what we need without any interfaces, and, in many cases, it will be much better because when we use a delegate to inject, for example, any source of data like SQL database, we don’t need to use any isolation framework like Moq to create mock or stub, and an even better way is to strongly separate methods with side effects and methods without side effects whenever possible. Thanks to this, the tests are more readable and much easier to write.Just let me show itThis is an example controller of ASP App. Of course, there is a lot of problems, like breaking MVC encapsulation, a legacy like TryUpdateModel, FormCollection, Repositories which are not doing what should do and so on.    public class PassengerController : Controller    {        public ActionResult InformationAboutPassengers(FormCollection formCollection)        {            var viewModel = new PassangerInformationViewModel();            if (TryUpdateModel(viewModel))            {                var confirmationEmail = emailService.GetConfirmationEmail(viewModel.Email);                var passengersPositions =                     new Regex(@\"&gt;\\p{Lu}{1}\\p{Ll}+(\\s{1}\\p{Lu}{3,}(-\\p{Lu}{3,})?)+&lt;\")                    .Matches(confirmationEmail)                    .Cast&lt;Match&gt;()                    .Select(m =&gt; m.Value);                if (!passengersPositions.Any())                    throw new ApplicationException(\"No passengers positions.\");                var passengers = new Collection&lt;string&gt;();                var vipPassangers = passengerRepository                    .QueryVipPassagersByPossition(passengersPositions);                foreach (var passengersPosition in passengersPositions)                {                    var matchPassengerValueByRegex =                         new Regex(@\"(\\s{1}\\p{Lu}{3,}(-\\p{Lu}{3,})?)+\")                        .Match(passengersPosition);                    if (!matchPassengerValueByRegex.Success)                        throw new Exception(\"Error\");                    var passenger = matchPassengerValueByRegex.Value.Substring(1);                    passengers.Add(passenger);                }                viewModel.Passagers = passengers                    .Where(p =&gt; p != string.Empty)                    .Distinct();                viewModel.VipPassagers = vipPassangers.Distinct();                return View(viewModel);            }            return RedirectToAction(\"Index\");        }    }Now look on the test, long isn’t? \t[Test]        public void Test()        {            var autoMoq = new AutoMoqer();            autoMoq.GetMock&lt;IEmailService&gt;()                .Setup(x =&gt; x.GetConfirmationEmail(It.IsAny&lt;string&gt;()))                .Returns(\"Email content\");            var callback = Enumerable.Empty&lt;string&gt;();            autoMoq.GetMock&lt;IPassangerRepository&gt;()\t\t.Setup(x =&gt; x.QueryVipPassagersByPossition(It.IsAny&lt;IEnumerable&lt;string&gt;&gt;()))                .Callback&lt;IEnumerable&lt;string&gt;&gt;(vipPassengers =&gt; callback = vipPassengers);             var form = new FormCollection();            form.Add(\"Email\", \"AnyEmail\");            var response = autoMoq.Create&lt;PassengerController&gt;()                .InformationAboutPassengers(form);            var result = (ViewResult)response;            var viewModel = (PassangerInformationViewModel)result.ViewData.Model;            var expectedCallBack = new List&lt;string&gt;()            {                \"any string\",                \"any string\"            };            var expectedPassengers = new List&lt;string&gt;            {                \"any string\",                \"any string\"            };            CollectionAssert.AreEqual(callback, expectedCallBack);            CollectionAssert.AreEqual(viewModel.Passagers, expectedPassengers);        }First refactoringAll right, let’s get rid of all UI framework dependencies. Let’s cut off the Moq from tests.    ... \tpublic ActionResult InformationAboutPassengers(FormCollection formCollection)        {            var viewModel = new PassangerInformationViewModel();            if (TryUpdateModel(viewModel))            {                var newViewModel = this.passengersViewModelProvaider                    .PassangerInformationViewModel(viewModel.Email);                return View(newViewModel);            }            return RedirectToAction(\"Index\");        }    ...    public class PassengerService    {        public Result GetPassengerInformation(string confirmationEmail,            Func&lt;IEnumerable&lt;string&gt;, IEnumerable&lt;string&gt;&gt; vipPassangersStrategy)        {            var passengersPositions = \t\tnew Regex(@\"&gt;\\p{Lu}{1}\\p{Ll}+(\\s{1}\\p{Lu}{3,}(-\\p{Lu}{3,})?)+&lt;\")                .Matches(confirmationEmail)                .Cast&lt;Match&gt;()                .Select(m =&gt; m.Value);            if (!passengersPositions.Any())                throw new ApplicationException(\"No passengers positions.\");            var passengers = new Collection&lt;string&gt;();            var vipPassangers = vipPassangersStrategy(passengersPositions);            foreach (var passengersPosition in passengersPositions)            {                var matchPassengerValueByRegex = \t\t    new Regex(@\"(\\s{1}\\p{Lu}{3,}(-\\p{Lu}{3,})?)+\")                    .Match(passengersPosition);                if (!matchPassengerValueByRegex.Success)                    throw new Exception(\"Error\");                var passenger = matchPassengerValueByRegex.Value.Substring(1);                passengers.Add(passenger);            }            var result = new Result();            result.Passagers = passengers                .Where(p =&gt; p != string.Empty)                .Distinct();            result.VipPassagers = vipPassangers.Distinct();            return result;        }    }    public class PassengersViewModelProvaider    {        private readonly IEmailService emailService;        private readonly IPassangerRepository passengerRepository;        public PassengersViewModelProvaider(IEmailService emailService,            IPassangerRepository passengerRepository)        {            this.emailService = emailService;            this.passengerRepository = passengerRepository;        }        public PassangerInformationViewModel PassangerInformationViewModel(string email)        {            var viewModel = new PassangerInformationViewModel();            var confirmationEmail = emailService.GetConfirmationEmail(viewModel.Email);            var result = new PassengerService().GetPassengerInformation(confirmationEmail,                possitions =&gt; passengerRepository.QueryVipPassagersByPossition(possitions));            viewModel.Email = email;            viewModel.Passagers = result.Passagers;            viewModel.VipPassagers = result.VipPassagers;            return viewModel;        }    }Now let’s look at what happened in the test, better isn’t?       [Test]        public void Test()        {            var passangerService = new PassengerService();            var callback = Enumerable.Empty&lt;string&gt;();            var result = passangerService.GetPassengerInformation(\"email confirmation\",                     vipPassangersStrategy: x =&gt; { callback = x; return null; });            var expectedCallBack = new List&lt;string&gt;()            {                \"any string\",                \"any string\"            };            var expectedPassengers = new List&lt;string&gt;            {                \"any string\",                \"any string\"            };            CollectionAssert.AreEqual(callback, expectedCallBack);            CollectionAssert.AreEqual(result.Passagers, expectedPassengers);        }Second refactoringLet’s correctly implemented the MVC pattern, provide SRP and separate methods with side effects.    ...   \tpublic ActionResult PassangerInformationViewModel(string email)        {            var newViewModel = passengersViewModelProvaider\t\t.GetPassangerInformationViewModel(email);            if (newViewModel != null)                return View(newViewModel);            return RedirectToAction(\"Index\");        }    ...    public class PassengersViewModelProvaider    {        private readonly IEmailService emailService;        private readonly IPassangerRepository passengerRepository;        public PassengersViewModelProvaider(IEmailService emailService,            IPassangerRepository passengerRepository)        {            this.emailService = emailService;            this.passengerRepository = passengerRepository;        }        public PassangerInformationViewModel GetPassangerInformationViewModel(string email)        {            var confirmationEmail = emailService.GetConfirmationEmail(email);            var possitions = ConfirmationEmailRewriter\t\t.RewritePassengersPositions(confirmationEmail);            var vipPassengers = passengerRepository.QueryVipPassagersByPossition(possitions);            var passengers = PassengersRewriter.RewritePassengers(possitions);            return new PassangerInformationViewModel(passengers, vipPassengers);        }    }    internal class ConfirmationEmailRewriter    {        public static IEnumerable&lt;string&gt; RewritePassengersPositions(string confirmationEmail)        {            return new Regex(@\"&gt;\\p{Lu}{1}\\p{Ll}+(\\s{1}\\p{Lu}{3,}(-\\p{Lu}{3,})?)+&lt;\")                .Matches(confirmationEmail)                .Cast&lt;Match&gt;()                .Where(x =&gt; x.Success)                .Select(m =&gt; m.Value);        }    }    internal class PassengersRewriter    {        public static IEnumerable&lt;string&gt; RewritePassengers(IEnumerable&lt;string&gt; passengersPositions)        {            var regex = new Regex(@\"(\\s{1}\\p{Lu}{3,}(-\\p{Lu}{3,})?)+\");            return passengersPositions.Select(possition =&gt; regex.Match(possition))                .Where(mached =&gt; mached.Success)                .Where(possition =&gt; possition.Value.Length &gt; 1)                .Select(possition =&gt; possition.Value.Substring(1))                .Where(possition =&gt; possition != string.Empty)                .Distinct();        }    }Tests looks good, isn’t?       [Test]        public void Test()        {            var passengerPossitions = ConfirmationEmailRewriter\t\t.RewritePassengersPositions(\"confirmation\");            var expectedPassengerPossitions = new List&lt;string&gt;()            {                \"any string\",                \"any string\"            };            CollectionAssert.AreEqual(expectedPassengerPossitions, passengerPossitions);        }        [Test]        public void Test2()        {            var anyPossitions = Enumerable.Empty&lt;string&gt;();            var passengers = PassengersRewriter.RewritePassengers(anyPossitions);            var expectedPassengers = new List&lt;string&gt;()            {                \"any string\",                \"any string\"            };            CollectionAssert.AreEqual(expectedPassengers, passengers);        }The DIP is still there, the facade PassengersViewModelProvaider has declared in interfaces what needs. The facade just manages other transaction scripts to solve any business problem. If you need a unit test you can just test the PassengersRewriter, but if you need an integration test you can make a test on the facade.ConclusionThe dependency inversion principle isn’t about testing, it’s about the management of dependency direction. You don’t need interfaces for testing but it can be helpful. SRP and Separate methods without side effects are most important for a good testing experience. Mixing dependencies of UI framework with business logic is never a good idea.",
            "content_html": "<p>No, just no, and once again no. It just doesn’t work like that and thinking this way can destroy your project. So let’s imagine that you have a service that has some business logic and roles but in order to work, it must communicate with remote services and it also needs to use multiple databases. So, what will happen in the tests? The tests will require a long configuration of mocks and stubs. But why bother if there is a better way to do it. Firstly, what is most important for a good testing experience is the “single responsibility principle”, next is concentrating on writing the methods which have no side effects. Of course, also of importance is understanding basic patterns, which doesn’t mean “I know how to implement it”, it really means “I know which problem solves this pattern and why I use it”.</p><h3 id=\"what-about-solid\">What about SOLID</h3><p>Now, I guess, somebody will say, “We need to inject each service through an interface because it must have a valid SOLID. “No, it’s not true. The dependency inversion is about the management of the dependency direction.” Robert C. Martin wrote in his book about the “naive implementation of DIP”, meaning that the heuristic approach of “each object needs an interface and DIP” isn’t a good idea because we can always find any objects that are non-volatile and concrete. He also wrote about SDP;  the Stable Dependencies Principle, wherein he demonstrated how to use DIP to manage the dependency direction, and which direction is correct.</p><h3 id=\"dip-and-architecture\">DIP and Architecture</h3><p>We can find in other books patterns which are using dependency inversion in this way, for example, Decoupled Contract in SOA,<img src=\"../../../assets/Img/contract.png?raw=true\" alt=\"CleanMonads\" /> 4 layers from Domain Driven Design, where we use a Repository interface in the domain layer to invert dependency of the infrastructure layer, Abstract Core, Hexagonal Architecture and so on. <img src=\"../../../assets/Img/DDD-DIP.jpg?raw=true\" alt=\"CleanMonads\" /></p><h3 id=\"what-i-mean\">What I mean?</h3><p>So why do I say all this? Because, using DIP for each “service”, “factories”, “parsers”, “validators”, and so on is completely misunderstanding what you are doing, and it disturbs the building of a good architecture. Modern languages like C# also support other paradigms like functional programming. So, we can just use <code class=\"highlighter-rouge\">Func&lt;T,TResult&gt;</code> or <code class=\"highlighter-rouge\">Action&lt;T&gt;</code> delegates to inject what we need without any interfaces, and, in many cases, it will be much better because when we use a delegate to inject, for example, any source of data like SQL database, we don’t need to use any isolation framework like Moq to create mock or stub, and an even better way is to strongly separate methods with side effects and methods without side effects whenever possible. Thanks to this, the tests are more readable and much easier to write.</p><h2 id=\"just-let-me-show-it\">Just let me show it</h2><p>This is an example controller of ASP App. Of course, there is a lot of problems, like breaking MVC encapsulation, a legacy like <code class=\"highlighter-rouge\">TryUpdateModel</code>, <code class=\"highlighter-rouge\">FormCollection</code>, Repositories which are not doing what should do and so on.</p><div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">PassengerController</span> <span class=\"p\">:</span> <span class=\"n\">Controller</span>    <span class=\"p\">{</span>        <span class=\"k\">public</span> <span class=\"n\">ActionResult</span> <span class=\"nf\">InformationAboutPassengers</span><span class=\"p\">(</span><span class=\"n\">FormCollection</span> <span class=\"n\">formCollection</span><span class=\"p\">)</span>        <span class=\"p\">{</span>            <span class=\"kt\">var</span> <span class=\"n\">viewModel</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">PassangerInformationViewModel</span><span class=\"p\">();</span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nf\">TryUpdateModel</span><span class=\"p\">(</span><span class=\"n\">viewModel</span><span class=\"p\">))</span>            <span class=\"p\">{</span>                <span class=\"kt\">var</span> <span class=\"n\">confirmationEmail</span> <span class=\"p\">=</span> <span class=\"n\">emailService</span><span class=\"p\">.</span><span class=\"nf\">GetConfirmationEmail</span><span class=\"p\">(</span><span class=\"n\">viewModel</span><span class=\"p\">.</span><span class=\"n\">Email</span><span class=\"p\">);</span>                <span class=\"kt\">var</span> <span class=\"n\">passengersPositions</span> <span class=\"p\">=</span>                     <span class=\"k\">new</span> <span class=\"nf\">Regex</span><span class=\"p\">(</span><span class=\"s\">@\"&gt;\\p{Lu}{1}\\p{Ll}+(\\s{1}\\p{Lu}{3,}(-\\p{Lu}{3,})?)+&lt;\"</span><span class=\"p\">)</span>                    <span class=\"p\">.</span><span class=\"nf\">Matches</span><span class=\"p\">(</span><span class=\"n\">confirmationEmail</span><span class=\"p\">)</span>                    <span class=\"p\">.</span><span class=\"n\">Cast</span><span class=\"p\">&lt;</span><span class=\"n\">Match</span><span class=\"p\">&gt;()</span>                    <span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"p\">=&gt;</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">Value</span><span class=\"p\">);</span>                <span class=\"k\">if</span> <span class=\"p\">(!</span><span class=\"n\">passengersPositions</span><span class=\"p\">.</span><span class=\"nf\">Any</span><span class=\"p\">())</span>                    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">ApplicationException</span><span class=\"p\">(</span><span class=\"s\">\"No passengers positions.\"</span><span class=\"p\">);</span>                <span class=\"kt\">var</span> <span class=\"n\">passengers</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Collection</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;();</span>                <span class=\"kt\">var</span> <span class=\"n\">vipPassangers</span> <span class=\"p\">=</span> <span class=\"n\">passengerRepository</span>                    <span class=\"p\">.</span><span class=\"nf\">QueryVipPassagersByPossition</span><span class=\"p\">(</span><span class=\"n\">passengersPositions</span><span class=\"p\">);</span>                <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"n\">passengersPosition</span> <span class=\"k\">in</span> <span class=\"n\">passengersPositions</span><span class=\"p\">)</span>                <span class=\"p\">{</span>                    <span class=\"kt\">var</span> <span class=\"n\">matchPassengerValueByRegex</span> <span class=\"p\">=</span>                         <span class=\"k\">new</span> <span class=\"nf\">Regex</span><span class=\"p\">(</span><span class=\"s\">@\"(\\s{1}\\p{Lu}{3,}(-\\p{Lu}{3,})?)+\"</span><span class=\"p\">)</span>                        <span class=\"p\">.</span><span class=\"nf\">Match</span><span class=\"p\">(</span><span class=\"n\">passengersPosition</span><span class=\"p\">);</span>                    <span class=\"k\">if</span> <span class=\"p\">(!</span><span class=\"n\">matchPassengerValueByRegex</span><span class=\"p\">.</span><span class=\"n\">Success</span><span class=\"p\">)</span>                        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">Exception</span><span class=\"p\">(</span><span class=\"s\">\"Error\"</span><span class=\"p\">);</span>                    <span class=\"kt\">var</span> <span class=\"n\">passenger</span> <span class=\"p\">=</span> <span class=\"n\">matchPassengerValueByRegex</span><span class=\"p\">.</span><span class=\"n\">Value</span><span class=\"p\">.</span><span class=\"nf\">Substring</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">);</span>                    <span class=\"n\">passengers</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">passenger</span><span class=\"p\">);</span>                <span class=\"p\">}</span>                <span class=\"n\">viewModel</span><span class=\"p\">.</span><span class=\"n\">Passagers</span> <span class=\"p\">=</span> <span class=\"n\">passengers</span>                    <span class=\"p\">.</span><span class=\"nf\">Where</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"p\">=&gt;</span> <span class=\"n\">p</span> <span class=\"p\">!=</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"n\">Empty</span><span class=\"p\">)</span>                    <span class=\"p\">.</span><span class=\"nf\">Distinct</span><span class=\"p\">();</span>                <span class=\"n\">viewModel</span><span class=\"p\">.</span><span class=\"n\">VipPassagers</span> <span class=\"p\">=</span> <span class=\"n\">vipPassangers</span><span class=\"p\">.</span><span class=\"nf\">Distinct</span><span class=\"p\">();</span>                <span class=\"k\">return</span> <span class=\"nf\">View</span><span class=\"p\">(</span><span class=\"n\">viewModel</span><span class=\"p\">);</span>            <span class=\"p\">}</span>            <span class=\"k\">return</span> <span class=\"nf\">RedirectToAction</span><span class=\"p\">(</span><span class=\"s\">\"Index\"</span><span class=\"p\">);</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span></code></pre></div></div><p>Now look on the test, long isn’t?</p><div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> \t<span class=\"p\">[</span><span class=\"n\">Test</span><span class=\"p\">]</span>        <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">Test</span><span class=\"p\">()</span>        <span class=\"p\">{</span>            <span class=\"kt\">var</span> <span class=\"n\">autoMoq</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">AutoMoqer</span><span class=\"p\">();</span>            <span class=\"n\">autoMoq</span><span class=\"p\">.</span><span class=\"n\">GetMock</span><span class=\"p\">&lt;</span><span class=\"n\">IEmailService</span><span class=\"p\">&gt;()</span>                <span class=\"p\">.</span><span class=\"nf\">Setup</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">=&gt;</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">GetConfirmationEmail</span><span class=\"p\">(</span><span class=\"n\">It</span><span class=\"p\">.</span><span class=\"n\">IsAny</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;()))</span>                <span class=\"p\">.</span><span class=\"nf\">Returns</span><span class=\"p\">(</span><span class=\"s\">\"Email content\"</span><span class=\"p\">);</span>            <span class=\"kt\">var</span> <span class=\"n\">callback</span> <span class=\"p\">=</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"n\">Empty</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;();</span>            <span class=\"n\">autoMoq</span><span class=\"p\">.</span><span class=\"n\">GetMock</span><span class=\"p\">&lt;</span><span class=\"n\">IPassangerRepository</span><span class=\"p\">&gt;()</span>\t\t<span class=\"p\">.</span><span class=\"nf\">Setup</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">=&gt;</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">QueryVipPassagersByPossition</span><span class=\"p\">(</span><span class=\"n\">It</span><span class=\"p\">.</span><span class=\"n\">IsAny</span><span class=\"p\">&lt;</span><span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;&gt;()))</span>                <span class=\"p\">.</span><span class=\"n\">Callback</span><span class=\"p\">&lt;</span><span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;&gt;(</span><span class=\"n\">vipPassengers</span> <span class=\"p\">=&gt;</span> <span class=\"n\">callback</span> <span class=\"p\">=</span> <span class=\"n\">vipPassengers</span><span class=\"p\">);</span>             <span class=\"kt\">var</span> <span class=\"n\">form</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">FormCollection</span><span class=\"p\">();</span>            <span class=\"n\">form</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"s\">\"Email\"</span><span class=\"p\">,</span> <span class=\"s\">\"AnyEmail\"</span><span class=\"p\">);</span>            <span class=\"kt\">var</span> <span class=\"n\">response</span> <span class=\"p\">=</span> <span class=\"n\">autoMoq</span><span class=\"p\">.</span><span class=\"n\">Create</span><span class=\"p\">&lt;</span><span class=\"n\">PassengerController</span><span class=\"p\">&gt;()</span>                <span class=\"p\">.</span><span class=\"nf\">InformationAboutPassengers</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">);</span>            <span class=\"kt\">var</span> <span class=\"n\">result</span> <span class=\"p\">=</span> <span class=\"p\">(</span><span class=\"n\">ViewResult</span><span class=\"p\">)</span><span class=\"n\">response</span><span class=\"p\">;</span>            <span class=\"kt\">var</span> <span class=\"n\">viewModel</span> <span class=\"p\">=</span> <span class=\"p\">(</span><span class=\"n\">PassangerInformationViewModel</span><span class=\"p\">)</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">ViewData</span><span class=\"p\">.</span><span class=\"n\">Model</span><span class=\"p\">;</span>            <span class=\"kt\">var</span> <span class=\"n\">expectedCallBack</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;()</span>            <span class=\"p\">{</span>                <span class=\"s\">\"any string\"</span><span class=\"p\">,</span>                <span class=\"s\">\"any string\"</span>            <span class=\"p\">};</span>            <span class=\"kt\">var</span> <span class=\"n\">expectedPassengers</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;</span>            <span class=\"p\">{</span>                <span class=\"s\">\"any string\"</span><span class=\"p\">,</span>                <span class=\"s\">\"any string\"</span>            <span class=\"p\">};</span>            <span class=\"n\">CollectionAssert</span><span class=\"p\">.</span><span class=\"nf\">AreEqual</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"n\">expectedCallBack</span><span class=\"p\">);</span>            <span class=\"n\">CollectionAssert</span><span class=\"p\">.</span><span class=\"nf\">AreEqual</span><span class=\"p\">(</span><span class=\"n\">viewModel</span><span class=\"p\">.</span><span class=\"n\">Passagers</span><span class=\"p\">,</span> <span class=\"n\">expectedPassengers</span><span class=\"p\">);</span>        <span class=\"p\">}</span></code></pre></div></div><h3 id=\"first-refactoring\">First refactoring</h3><p>All right, let’s get rid of all UI framework dependencies. Let’s cut off the Moq from tests.</p><div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"p\">...</span> \t<span class=\"k\">public</span> <span class=\"n\">ActionResult</span> <span class=\"nf\">InformationAboutPassengers</span><span class=\"p\">(</span><span class=\"n\">FormCollection</span> <span class=\"n\">formCollection</span><span class=\"p\">)</span>        <span class=\"p\">{</span>            <span class=\"kt\">var</span> <span class=\"n\">viewModel</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">PassangerInformationViewModel</span><span class=\"p\">();</span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nf\">TryUpdateModel</span><span class=\"p\">(</span><span class=\"n\">viewModel</span><span class=\"p\">))</span>            <span class=\"p\">{</span>                <span class=\"kt\">var</span> <span class=\"n\">newViewModel</span> <span class=\"p\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">passengersViewModelProvaider</span>                    <span class=\"p\">.</span><span class=\"nf\">PassangerInformationViewModel</span><span class=\"p\">(</span><span class=\"n\">viewModel</span><span class=\"p\">.</span><span class=\"n\">Email</span><span class=\"p\">);</span>                <span class=\"k\">return</span> <span class=\"nf\">View</span><span class=\"p\">(</span><span class=\"n\">newViewModel</span><span class=\"p\">);</span>            <span class=\"p\">}</span>            <span class=\"k\">return</span> <span class=\"nf\">RedirectToAction</span><span class=\"p\">(</span><span class=\"s\">\"Index\"</span><span class=\"p\">);</span>        <span class=\"p\">}</span>    <span class=\"p\">...</span>    <span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">PassengerService</span>    <span class=\"p\">{</span>        <span class=\"k\">public</span> <span class=\"n\">Result</span> <span class=\"nf\">GetPassengerInformation</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"n\">confirmationEmail</span><span class=\"p\">,</span>            <span class=\"n\">Func</span><span class=\"p\">&lt;</span><span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;,</span> <span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;&gt;</span> <span class=\"n\">vipPassangersStrategy</span><span class=\"p\">)</span>        <span class=\"p\">{</span>            <span class=\"kt\">var</span> <span class=\"n\">passengersPositions</span> <span class=\"p\">=</span> \t\t<span class=\"k\">new</span> <span class=\"nf\">Regex</span><span class=\"p\">(</span><span class=\"s\">@\"&gt;\\p{Lu}{1}\\p{Ll}+(\\s{1}\\p{Lu}{3,}(-\\p{Lu}{3,})?)+&lt;\"</span><span class=\"p\">)</span>                <span class=\"p\">.</span><span class=\"nf\">Matches</span><span class=\"p\">(</span><span class=\"n\">confirmationEmail</span><span class=\"p\">)</span>                <span class=\"p\">.</span><span class=\"n\">Cast</span><span class=\"p\">&lt;</span><span class=\"n\">Match</span><span class=\"p\">&gt;()</span>                <span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"p\">=&gt;</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">Value</span><span class=\"p\">);</span>            <span class=\"k\">if</span> <span class=\"p\">(!</span><span class=\"n\">passengersPositions</span><span class=\"p\">.</span><span class=\"nf\">Any</span><span class=\"p\">())</span>                <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">ApplicationException</span><span class=\"p\">(</span><span class=\"s\">\"No passengers positions.\"</span><span class=\"p\">);</span>            <span class=\"kt\">var</span> <span class=\"n\">passengers</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Collection</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;();</span>            <span class=\"kt\">var</span> <span class=\"n\">vipPassangers</span> <span class=\"p\">=</span> <span class=\"nf\">vipPassangersStrategy</span><span class=\"p\">(</span><span class=\"n\">passengersPositions</span><span class=\"p\">);</span>            <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"n\">passengersPosition</span> <span class=\"k\">in</span> <span class=\"n\">passengersPositions</span><span class=\"p\">)</span>            <span class=\"p\">{</span>                <span class=\"kt\">var</span> <span class=\"n\">matchPassengerValueByRegex</span> <span class=\"p\">=</span> \t\t    <span class=\"k\">new</span> <span class=\"nf\">Regex</span><span class=\"p\">(</span><span class=\"s\">@\"(\\s{1}\\p{Lu}{3,}(-\\p{Lu}{3,})?)+\"</span><span class=\"p\">)</span>                    <span class=\"p\">.</span><span class=\"nf\">Match</span><span class=\"p\">(</span><span class=\"n\">passengersPosition</span><span class=\"p\">);</span>                <span class=\"k\">if</span> <span class=\"p\">(!</span><span class=\"n\">matchPassengerValueByRegex</span><span class=\"p\">.</span><span class=\"n\">Success</span><span class=\"p\">)</span>                    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">Exception</span><span class=\"p\">(</span><span class=\"s\">\"Error\"</span><span class=\"p\">);</span>                <span class=\"kt\">var</span> <span class=\"n\">passenger</span> <span class=\"p\">=</span> <span class=\"n\">matchPassengerValueByRegex</span><span class=\"p\">.</span><span class=\"n\">Value</span><span class=\"p\">.</span><span class=\"nf\">Substring</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">);</span>                <span class=\"n\">passengers</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">passenger</span><span class=\"p\">);</span>            <span class=\"p\">}</span>            <span class=\"kt\">var</span> <span class=\"n\">result</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Result</span><span class=\"p\">();</span>            <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Passagers</span> <span class=\"p\">=</span> <span class=\"n\">passengers</span>                <span class=\"p\">.</span><span class=\"nf\">Where</span><span class=\"p\">(</span><span class=\"n\">p</span> <span class=\"p\">=&gt;</span> <span class=\"n\">p</span> <span class=\"p\">!=</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"n\">Empty</span><span class=\"p\">)</span>                <span class=\"p\">.</span><span class=\"nf\">Distinct</span><span class=\"p\">();</span>            <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">VipPassagers</span> <span class=\"p\">=</span> <span class=\"n\">vipPassangers</span><span class=\"p\">.</span><span class=\"nf\">Distinct</span><span class=\"p\">();</span>            <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">;</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>    <span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">PassengersViewModelProvaider</span>    <span class=\"p\">{</span>        <span class=\"k\">private</span> <span class=\"k\">readonly</span> <span class=\"n\">IEmailService</span> <span class=\"n\">emailService</span><span class=\"p\">;</span>        <span class=\"k\">private</span> <span class=\"k\">readonly</span> <span class=\"n\">IPassangerRepository</span> <span class=\"n\">passengerRepository</span><span class=\"p\">;</span>        <span class=\"k\">public</span> <span class=\"nf\">PassengersViewModelProvaider</span><span class=\"p\">(</span><span class=\"n\">IEmailService</span> <span class=\"n\">emailService</span><span class=\"p\">,</span>            <span class=\"n\">IPassangerRepository</span> <span class=\"n\">passengerRepository</span><span class=\"p\">)</span>        <span class=\"p\">{</span>            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">emailService</span> <span class=\"p\">=</span> <span class=\"n\">emailService</span><span class=\"p\">;</span>            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">passengerRepository</span> <span class=\"p\">=</span> <span class=\"n\">passengerRepository</span><span class=\"p\">;</span>        <span class=\"p\">}</span>        <span class=\"k\">public</span> <span class=\"n\">PassangerInformationViewModel</span> <span class=\"nf\">PassangerInformationViewModel</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"n\">email</span><span class=\"p\">)</span>        <span class=\"p\">{</span>            <span class=\"kt\">var</span> <span class=\"n\">viewModel</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">PassangerInformationViewModel</span><span class=\"p\">();</span>            <span class=\"kt\">var</span> <span class=\"n\">confirmationEmail</span> <span class=\"p\">=</span> <span class=\"n\">emailService</span><span class=\"p\">.</span><span class=\"nf\">GetConfirmationEmail</span><span class=\"p\">(</span><span class=\"n\">viewModel</span><span class=\"p\">.</span><span class=\"n\">Email</span><span class=\"p\">);</span>            <span class=\"kt\">var</span> <span class=\"n\">result</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">PassengerService</span><span class=\"p\">().</span><span class=\"nf\">GetPassengerInformation</span><span class=\"p\">(</span><span class=\"n\">confirmationEmail</span><span class=\"p\">,</span>                <span class=\"n\">possitions</span> <span class=\"p\">=&gt;</span> <span class=\"n\">passengerRepository</span><span class=\"p\">.</span><span class=\"nf\">QueryVipPassagersByPossition</span><span class=\"p\">(</span><span class=\"n\">possitions</span><span class=\"p\">));</span>            <span class=\"n\">viewModel</span><span class=\"p\">.</span><span class=\"n\">Email</span> <span class=\"p\">=</span> <span class=\"n\">email</span><span class=\"p\">;</span>            <span class=\"n\">viewModel</span><span class=\"p\">.</span><span class=\"n\">Passagers</span> <span class=\"p\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Passagers</span><span class=\"p\">;</span>            <span class=\"n\">viewModel</span><span class=\"p\">.</span><span class=\"n\">VipPassagers</span> <span class=\"p\">=</span> <span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">VipPassagers</span><span class=\"p\">;</span>            <span class=\"k\">return</span> <span class=\"n\">viewModel</span><span class=\"p\">;</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span></code></pre></div></div><p>Now let’s look at what happened in the test, better isn’t?</p><div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>       <span class=\"p\">[</span><span class=\"n\">Test</span><span class=\"p\">]</span>        <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">Test</span><span class=\"p\">()</span>        <span class=\"p\">{</span>            <span class=\"kt\">var</span> <span class=\"n\">passangerService</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">PassengerService</span><span class=\"p\">();</span>            <span class=\"kt\">var</span> <span class=\"n\">callback</span> <span class=\"p\">=</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"n\">Empty</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;();</span>            <span class=\"kt\">var</span> <span class=\"n\">result</span> <span class=\"p\">=</span> <span class=\"n\">passangerService</span><span class=\"p\">.</span><span class=\"nf\">GetPassengerInformation</span><span class=\"p\">(</span><span class=\"s\">\"email confirmation\"</span><span class=\"p\">,</span>                     <span class=\"n\">vipPassangersStrategy</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span> <span class=\"n\">callback</span> <span class=\"p\">=</span> <span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"p\">;</span> <span class=\"p\">});</span>            <span class=\"kt\">var</span> <span class=\"n\">expectedCallBack</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;()</span>            <span class=\"p\">{</span>                <span class=\"s\">\"any string\"</span><span class=\"p\">,</span>                <span class=\"s\">\"any string\"</span>            <span class=\"p\">};</span>            <span class=\"kt\">var</span> <span class=\"n\">expectedPassengers</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;</span>            <span class=\"p\">{</span>                <span class=\"s\">\"any string\"</span><span class=\"p\">,</span>                <span class=\"s\">\"any string\"</span>            <span class=\"p\">};</span>            <span class=\"n\">CollectionAssert</span><span class=\"p\">.</span><span class=\"nf\">AreEqual</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"n\">expectedCallBack</span><span class=\"p\">);</span>            <span class=\"n\">CollectionAssert</span><span class=\"p\">.</span><span class=\"nf\">AreEqual</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">Passagers</span><span class=\"p\">,</span> <span class=\"n\">expectedPassengers</span><span class=\"p\">);</span>        <span class=\"p\">}</span></code></pre></div></div><h3 id=\"second-refactoring\">Second refactoring</h3><p>Let’s correctly implemented the MVC pattern, provide SRP and separate methods with side effects.</p><div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"p\">...</span>   \t<span class=\"k\">public</span> <span class=\"n\">ActionResult</span> <span class=\"nf\">PassangerInformationViewModel</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"n\">email</span><span class=\"p\">)</span>        <span class=\"p\">{</span>            <span class=\"kt\">var</span> <span class=\"n\">newViewModel</span> <span class=\"p\">=</span> <span class=\"n\">passengersViewModelProvaider</span>\t\t<span class=\"p\">.</span><span class=\"nf\">GetPassangerInformationViewModel</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">);</span>            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">newViewModel</span> <span class=\"p\">!=</span> <span class=\"k\">null</span><span class=\"p\">)</span>                <span class=\"k\">return</span> <span class=\"nf\">View</span><span class=\"p\">(</span><span class=\"n\">newViewModel</span><span class=\"p\">);</span>            <span class=\"k\">return</span> <span class=\"nf\">RedirectToAction</span><span class=\"p\">(</span><span class=\"s\">\"Index\"</span><span class=\"p\">);</span>        <span class=\"p\">}</span>    <span class=\"p\">...</span>    <span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">PassengersViewModelProvaider</span>    <span class=\"p\">{</span>        <span class=\"k\">private</span> <span class=\"k\">readonly</span> <span class=\"n\">IEmailService</span> <span class=\"n\">emailService</span><span class=\"p\">;</span>        <span class=\"k\">private</span> <span class=\"k\">readonly</span> <span class=\"n\">IPassangerRepository</span> <span class=\"n\">passengerRepository</span><span class=\"p\">;</span>        <span class=\"k\">public</span> <span class=\"nf\">PassengersViewModelProvaider</span><span class=\"p\">(</span><span class=\"n\">IEmailService</span> <span class=\"n\">emailService</span><span class=\"p\">,</span>            <span class=\"n\">IPassangerRepository</span> <span class=\"n\">passengerRepository</span><span class=\"p\">)</span>        <span class=\"p\">{</span>            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">emailService</span> <span class=\"p\">=</span> <span class=\"n\">emailService</span><span class=\"p\">;</span>            <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"n\">passengerRepository</span> <span class=\"p\">=</span> <span class=\"n\">passengerRepository</span><span class=\"p\">;</span>        <span class=\"p\">}</span>        <span class=\"k\">public</span> <span class=\"n\">PassangerInformationViewModel</span> <span class=\"nf\">GetPassangerInformationViewModel</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"n\">email</span><span class=\"p\">)</span>        <span class=\"p\">{</span>            <span class=\"kt\">var</span> <span class=\"n\">confirmationEmail</span> <span class=\"p\">=</span> <span class=\"n\">emailService</span><span class=\"p\">.</span><span class=\"nf\">GetConfirmationEmail</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">);</span>            <span class=\"kt\">var</span> <span class=\"n\">possitions</span> <span class=\"p\">=</span> <span class=\"n\">ConfirmationEmailRewriter</span>\t\t<span class=\"p\">.</span><span class=\"nf\">RewritePassengersPositions</span><span class=\"p\">(</span><span class=\"n\">confirmationEmail</span><span class=\"p\">);</span>            <span class=\"kt\">var</span> <span class=\"n\">vipPassengers</span> <span class=\"p\">=</span> <span class=\"n\">passengerRepository</span><span class=\"p\">.</span><span class=\"nf\">QueryVipPassagersByPossition</span><span class=\"p\">(</span><span class=\"n\">possitions</span><span class=\"p\">);</span>            <span class=\"kt\">var</span> <span class=\"n\">passengers</span> <span class=\"p\">=</span> <span class=\"n\">PassengersRewriter</span><span class=\"p\">.</span><span class=\"nf\">RewritePassengers</span><span class=\"p\">(</span><span class=\"n\">possitions</span><span class=\"p\">);</span>            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">PassangerInformationViewModel</span><span class=\"p\">(</span><span class=\"n\">passengers</span><span class=\"p\">,</span> <span class=\"n\">vipPassengers</span><span class=\"p\">);</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>    <span class=\"k\">internal</span> <span class=\"k\">class</span> <span class=\"nc\">ConfirmationEmailRewriter</span>    <span class=\"p\">{</span>        <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;</span> <span class=\"nf\">RewritePassengersPositions</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"n\">confirmationEmail</span><span class=\"p\">)</span>        <span class=\"p\">{</span>            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nf\">Regex</span><span class=\"p\">(</span><span class=\"s\">@\"&gt;\\p{Lu}{1}\\p{Ll}+(\\s{1}\\p{Lu}{3,}(-\\p{Lu}{3,})?)+&lt;\"</span><span class=\"p\">)</span>                <span class=\"p\">.</span><span class=\"nf\">Matches</span><span class=\"p\">(</span><span class=\"n\">confirmationEmail</span><span class=\"p\">)</span>                <span class=\"p\">.</span><span class=\"n\">Cast</span><span class=\"p\">&lt;</span><span class=\"n\">Match</span><span class=\"p\">&gt;()</span>                <span class=\"p\">.</span><span class=\"nf\">Where</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">=&gt;</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">Success</span><span class=\"p\">)</span>                <span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"p\">=&gt;</span> <span class=\"n\">m</span><span class=\"p\">.</span><span class=\"n\">Value</span><span class=\"p\">);</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>    <span class=\"k\">internal</span> <span class=\"k\">class</span> <span class=\"nc\">PassengersRewriter</span>    <span class=\"p\">{</span>        <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;</span> <span class=\"nf\">RewritePassengers</span><span class=\"p\">(</span><span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;</span> <span class=\"n\">passengersPositions</span><span class=\"p\">)</span>        <span class=\"p\">{</span>            <span class=\"kt\">var</span> <span class=\"n\">regex</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Regex</span><span class=\"p\">(</span><span class=\"s\">@\"(\\s{1}\\p{Lu}{3,}(-\\p{Lu}{3,})?)+\"</span><span class=\"p\">);</span>            <span class=\"k\">return</span> <span class=\"n\">passengersPositions</span><span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">possition</span> <span class=\"p\">=&gt;</span> <span class=\"n\">regex</span><span class=\"p\">.</span><span class=\"nf\">Match</span><span class=\"p\">(</span><span class=\"n\">possition</span><span class=\"p\">))</span>                <span class=\"p\">.</span><span class=\"nf\">Where</span><span class=\"p\">(</span><span class=\"n\">mached</span> <span class=\"p\">=&gt;</span> <span class=\"n\">mached</span><span class=\"p\">.</span><span class=\"n\">Success</span><span class=\"p\">)</span>                <span class=\"p\">.</span><span class=\"nf\">Where</span><span class=\"p\">(</span><span class=\"n\">possition</span> <span class=\"p\">=&gt;</span> <span class=\"n\">possition</span><span class=\"p\">.</span><span class=\"n\">Value</span><span class=\"p\">.</span><span class=\"n\">Length</span> <span class=\"p\">&gt;</span> <span class=\"m\">1</span><span class=\"p\">)</span>                <span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">possition</span> <span class=\"p\">=&gt;</span> <span class=\"n\">possition</span><span class=\"p\">.</span><span class=\"n\">Value</span><span class=\"p\">.</span><span class=\"nf\">Substring</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">))</span>                <span class=\"p\">.</span><span class=\"nf\">Where</span><span class=\"p\">(</span><span class=\"n\">possition</span> <span class=\"p\">=&gt;</span> <span class=\"n\">possition</span> <span class=\"p\">!=</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"n\">Empty</span><span class=\"p\">)</span>                <span class=\"p\">.</span><span class=\"nf\">Distinct</span><span class=\"p\">();</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span></code></pre></div></div><p>Tests looks good, isn’t?</p><div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>       <span class=\"p\">[</span><span class=\"n\">Test</span><span class=\"p\">]</span>        <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">Test</span><span class=\"p\">()</span>        <span class=\"p\">{</span>            <span class=\"kt\">var</span> <span class=\"n\">passengerPossitions</span> <span class=\"p\">=</span> <span class=\"n\">ConfirmationEmailRewriter</span>\t\t<span class=\"p\">.</span><span class=\"nf\">RewritePassengersPositions</span><span class=\"p\">(</span><span class=\"s\">\"confirmation\"</span><span class=\"p\">);</span>            <span class=\"kt\">var</span> <span class=\"n\">expectedPassengerPossitions</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;()</span>            <span class=\"p\">{</span>                <span class=\"s\">\"any string\"</span><span class=\"p\">,</span>                <span class=\"s\">\"any string\"</span>            <span class=\"p\">};</span>            <span class=\"n\">CollectionAssert</span><span class=\"p\">.</span><span class=\"nf\">AreEqual</span><span class=\"p\">(</span><span class=\"n\">expectedPassengerPossitions</span><span class=\"p\">,</span> <span class=\"n\">passengerPossitions</span><span class=\"p\">);</span>        <span class=\"p\">}</span>        <span class=\"p\">[</span><span class=\"n\">Test</span><span class=\"p\">]</span>        <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">Test2</span><span class=\"p\">()</span>        <span class=\"p\">{</span>            <span class=\"kt\">var</span> <span class=\"n\">anyPossitions</span> <span class=\"p\">=</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"n\">Empty</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;();</span>            <span class=\"kt\">var</span> <span class=\"n\">passengers</span> <span class=\"p\">=</span> <span class=\"n\">PassengersRewriter</span><span class=\"p\">.</span><span class=\"nf\">RewritePassengers</span><span class=\"p\">(</span><span class=\"n\">anyPossitions</span><span class=\"p\">);</span>            <span class=\"kt\">var</span> <span class=\"n\">expectedPassengers</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;()</span>            <span class=\"p\">{</span>                <span class=\"s\">\"any string\"</span><span class=\"p\">,</span>                <span class=\"s\">\"any string\"</span>            <span class=\"p\">};</span>            <span class=\"n\">CollectionAssert</span><span class=\"p\">.</span><span class=\"nf\">AreEqual</span><span class=\"p\">(</span><span class=\"n\">expectedPassengers</span><span class=\"p\">,</span> <span class=\"n\">passengers</span><span class=\"p\">);</span>        <span class=\"p\">}</span></code></pre></div></div><p>The DIP is still there, the facade <code class=\"highlighter-rouge\">PassengersViewModelProvaider</code> has declared in interfaces what needs. The facade just manages other transaction scripts to solve any business problem. If you need a unit test you can just test the <code class=\"highlighter-rouge\">PassengersRewriter</code>, but if you need an integration test you can make a test on the facade.</p><h2 id=\"conclusion\">Conclusion</h2><p>The dependency inversion principle isn’t about testing, it’s about the management of dependency direction. You don’t need interfaces for testing but it can be helpful. SRP and Separate methods without side effects are most important for a good testing experience. Mixing dependencies of UI framework with business logic is never a good idea.</p>",
            "url": "http://localhost:4000/2020/04/17/i-need-interfaces-for-testable",
            
            
            
            "tags": ["CSharp","Testing","Architecture"],
            
            "date_published": "2020-04-17T00:00:00+02:00",
            "date_modified": "2020-04-17T00:00:00+02:00",
            
                "author": 
                "{"name"=>nil, "email"=>nil, "url"=>nil, "avatar"=>nil}"
                
            
        }
    
    ]
}